{"meta":{"title":"Solomon","subtitle":"","description":"","author":"Solomon","url":"http://example.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-11-05T16:10:30.881Z","updated":"2022-10-30T18:00:46.883Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-11-05T16:54:30.988Z","updated":"2022-11-05T16:54:30.988Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"123456789101112131415161718192021222324252627Person person = new Person();person.Name = &quot;Solomon&quot;;person.QQ = &quot;1426898429&quot;; //this is realperson.HeaderPhoto=&quot;花衬衫、花短裤、草帽&quot;;DateFormat date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);person.Birthday = date.parse(&quot;2002-11-08&quot;);person.Hobby = &quot;女&quot;;person.Sex = &quot;男&quot;;String major[] = &#123; &quot;HUAWEI_RS&quot;, &quot;CISCO_RS&quot;, &quot;a_little_Java&quot; &#125;;person.Major = major;String experience[] = &#123; &quot;交换机路由器的网线拔出与连接&quot;, &quot;Windows系统的的开机与关机&quot;, &quot;Linux系统的开机与关机&quot; &#125;;person.WorkExperience = experience;person.IWantSay(&quot;每天起床的意义，就是拥抱工作！&quot;);"},{"title":"标签","date":"2022-11-05T16:10:30.895Z","updated":"2022-10-30T18:29:44.688Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"一些有意思的小项目","date":"2022-11-05T16:10:30.894Z","updated":"2022-10-30T18:50:21.530Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-11-05T16:10:30.883Z","updated":"2022-10-30T18:00:46.883Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"删除git所有提交记录","slug":"Git/删除git所有提交记录","date":"2022-12-16T20:10:12.000Z","updated":"2022-12-21T00:47:07.725Z","comments":true,"path":"2022/12/17/Git/删除git所有提交记录/","link":"","permalink":"http://example.com/2022/12/17/Git/%E5%88%A0%E9%99%A4git%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/","excerpt":"","text":"让我们删除历史厚重的主分支提交记录1、切换一个新的分支 1git checkout --orphan new_branch; 2、添加所有到new_branch 1git add -A 3、提交新建分支 1git commit -am &quot;commit a new branch&quot; 4、删除旧分支 1git branch -D master 5、重命名新分支为master 12git checkout new_branchgit branch -m master 8、强制推送到仓库中 1git push -f orgin master","categories":[{"name":"Git","slug":"Git","permalink":"http://example.com/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"}]},{"title":"3、OSPF基础介绍","slug":"HCIP_datacom/4.OSPF基础介绍","date":"2022-11-04T16:45:21.000Z","updated":"2022-11-15T18:21:15.444Z","comments":true,"path":"2022/11/05/HCIP_datacom/4.OSPF基础介绍/","link":"","permalink":"http://example.com/2022/11/05/HCIP_datacom/4.OSPF%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"前言· 路由器根据路由表转发数据包，路由表项可通过手动配置和动态路由协议生成。 · 静态路由比动态路由使用更少的贷款，并且不占用CPU资源来计算和分析路由更新。当网络结构比较简单时，只需配置静态路由就可以使网络正常工作。但是当网络发生故障或者拓扑发生变化后，静态路由不会自动更新，必须手动重新配置。 · 相比较于静态路由，动态路由协议具有更强的可扩展性，具备更强的应变能力。 · OSPF（Open Shortest Path First，开放式最短路径优先）具有扩展性强，收敛速度快等特点，作为优秀的内部网关协议被广泛使用。 Ⅰ - 动态路由协议简介1.动态路由协议的分类按工作区域分类： 1234567IGP（Interior Gateway Protocols，内部网关协议）：· RIP· OSPF· IS-ISEGP（Exterior Gateway Protocols，外部网关协议）&#123;· BGP 按工作机制及算法分类： 123456（Distance Vector Routing Protocols，距离矢量路由协议）· RIP（Link-State Routing Protocols，链路状态路由协议）· OSPF· IS-IS · BGP使用一种基于距离矢量算法修改后的算法，该算法被称为路径矢量算法。因此在某些场合下，BGP也被成为路径矢量路由协议。 · IGP（内部网关协议）在同一个自治系统内交换路由信息，IGP的主要目的是发现和计算自治域内的路由信息。 · EGP（外部网关协议）主要用于AS（自治系统）之间的互联。 2.距离矢量路由协议· 运行距离矢量路由协议的路由器周期性地泛洪自己的路由表。通过路由地交互，每台路由器都从相邻地路由器学习到路由，并且加载进自己的路由表中，然后再通告给其他相邻路由器。 · 对于网络中地所有路由器而言，路由器并不清楚网络的拓扑，只是简单地知道要去往某个目的地网段方向在哪里，开销有多大。 3.链路状态路由协议 - LSA泛洪· 链路状态路由协议通告的是链路状态而不是路由信息。 · 运行链路状态协议的路由器之间首先会建立邻居关系，然后彼此之间开始交换LSA（Link State Advertisement，链路状态通告）。 · 链路状态通告，可以简单的理解为每台路由器都产生一个描述自己的直连接口状态（包括接口的开销、与邻居路由器之间的关系等）的通告。 4.链路状态路由协议 - LSDB维护每台路由器都会产生LSA，路由器将接收到的LSA放入自己的LSDB（Link State DataBase，链路状态数据库）。路由器通过对LSDB中所储存的LSA进行解析，进而了解全网拓扑。 5.链路状态路由协议 - SPF计算每台路由器基于LSDB，使用SPF（Shortest Path First，最短路径优先）算法进行计算。每台路由器都计算出一棵以自己为根的、无环的、拥有最短路径的“树”。有了这颗“树”，路由器就已经知道了到达所有网段的优选路径。SPF是OSPF路由协议的一个核心算法，用来再一个复杂的网络中做出路由优选的决策。 6.链路状态路由协议 - 路由表生成路由器将计算出来的优选路径，加载进自己的路由表。 7.链路状态路由协议总结 第一步：建立相邻路由器之间的邻居关系。 第二步：邻居之间交互链路状态信息和同步LSDB 第三步：是进行优选路径计算 第四步：根据最短路径树生成路由表项加载到路由表","categories":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/categories/HCIP-datacom/"}],"tags":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/tags/HCIP-datacom/"}]},{"title":"2、IP路由基础","slug":"HCIP_datacom/3.HCIP-datacom IP路由基础","date":"2022-11-03T19:45:42.000Z","updated":"2022-11-09T21:31:18.697Z","comments":true,"path":"2022/11/04/HCIP_datacom/3.HCIP-datacom IP路由基础/","link":"","permalink":"http://example.com/2022/11/04/HCIP_datacom/3.HCIP-datacom%20IP%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/","excerpt":"","text":"前言· 当路由器收到一个IP数据包，路由器会根据数据包的目的IP地址查找FIB（Forwarding Information Base，转发信息库）表，找到“最匹配”的路由条目后，将数据包根据路由条目所指示的出接口或下一跳转发出去。 · 路由器获取路由的方式有三种，分别是动态路由、静态路由、直连路由。一个网络中可能会同时存在这三种方式，那么采用不同方式获取路由的路由器之间如何实现路由可达？ Ⅰ - IP路由基础1.IP路由概述当路由器收到一个IP报文时，路由器根据该IP报文的目的地址匹配路由条目（或路由表项）。 · 若有匹配的路由条目，则依据该条目中的出接口或下一跳等信息进行报文转发。 · 若无匹配的路由条目，则路由器没有相关路由信息用于指导报文转发，此时会丢弃该报文。 2.RIP与FIB具有路由功能的网络设备都拥有两中国重要的数据表： · 路由表——RIB（Routing Information Base，路由信息库） · 转发表——FIB（Forwarding Information Base，转发信息库） · 路由器维护一张本地核心路由表，此外还维护着各种路由协议的路由表 1display ip routing-table //路由表 可以将路由表视为路由器的控制平面，路由表实际上并不直接指导数据转发。路由器在执行路由表查询时，并不是在路由表中进行报文目的地址的查询，真正指导数据转发的时FIB表，路由器将路由表中的最优路由下载到FIB表，此后如果路由表中的相关表项发生变化，FIB表也将立即同步。 在大多数场合，阐述路由器数据转发过程时，会用“路由表”这个说法，实际上，路由器查询的时FIB表，路由表位于控制层面仅提供路由信息。 1display fib [ slot-id ] //转发表（FIB表）[ slot-id ]：显示指定槽位号的FIB表信息，取值范围根据实际配置选取 FIB表位于路由器的数据平面，亦被称为转发表项，每条转发表项都指定要到达某个目的地所需通过的出接口以及下一跳IP地址等信息。 3.路由表中的关键字段 1234567Destination //表示此路由的目的地址，用来标识IP包的目的地址或目的网络Mask //表示此目的地址的子网掩码长度。与目的地址一起来标识目的主机或路由器所在的网段的地址。Proto //表示学习此路由的路由协议（Protocol）Pre //表示此路由的路由协议优先级（Prefrence）Cost //路由开销NextHop //表示转发到此目的网络的下一跳，指明数据转发的下一个设备。Interface //表示转发到此目的网络的出接口，指明数据将从本地路由器哪个接口转发出去。 注意： · 路由器分别定义了外部优先级和内部优先级。外部优先级可手动配置，反之内部优先级不可手动修改。 · 选择路由时先比较外部优先级，当不同的路由协议配置了相同的外部优先级时，系统会通过内部优先级决定哪个路由协议发现的路由将成为最优路由。 · Preference用于不同路由协议间路由优先级的比较，Cost用于同一种路由协议内部不同路由的优先级的比较。 4.FIB表中的关键字段 12345678910111213Titak number of Routes //路由表总数Destination/Mask //目的地址/掩码长度Nexthop //下一跳Flag //当前标志，G、H、U、S、D、B的组合 G // [ Gateway ] 网关路由，表示下一跳是网关 H // [ Host ] 主机路由，表示该路由为主机路由 U // [ Up ] 可用路由，表示该路由状态时UP S // [ Static ] 静态路由 D // [ Dynamic ] 动态路由 B // [ Black Hole ] 黑洞路由，表示下一跳是空接口TimeStamp //时间戳，表示该表项存在的时间，单位是秒Interface //到目的地址的出接口TunnelID //表示转发表项索引，该值不为0时，表示该项的报文通过隧道转发（如：MPLS隧道转发），该值为0时，表示报文不通过隧道转发。 5.IP路由查找的最长匹配原则· 路由器查找FIB表时，将报文的目的IP地址和FIB表中各表项的掩码位进行“逻辑与”，得到的地址符合FIB表中的网络地址则匹配。 · 最终选择一个掩码最长的FIB表转发报文。 6.路由的来源 · 直连路由：直连接口所在网段的路由，由设备自动生成。 · 静态路由：由网络管理员手工配置的路由条目。 · 路由器通过动态路由协议（OSPF、IS-IS、BGP等）学习到的路由。 7.动态路由协议动态路由协议根据作用范围不同可分为： · 内部网关协议IGP（Internal Gateway Protocol）：在一个自治系统AS内部运行 · 外部网关协议EGP（Exterior Gateway Protocol）：运行于不同自治系统之间，BGP时目前最常用的EGP协议。 8.路由迭代路由必须有智联的下一跳才能够转发，静态路由或BGP路由的下一跳可能不是直连的邻居，因此需要计算出一个直连的下一跳，这个过程称为路由迭代。 Ⅱ - IP路由高级应用9.路由引入路由引入是指将路由信息从一种路由协议发布到另一种路由协议的操作。 · 通过路由引入，可以实现路由信息在不同路由协议间传递。 · 执行路由引入时，还可以部署路由控制，从而实现对业务流量的灵活把控。 · 在路由引入时，如果将A协议路由引入到B协议路由，那么要在B协议路由中进行引入配置 · 在路由引入时需注意： 1、路由的优先级 2、路由回灌 3、路由度量值 命令： 12[Huawei-ospf-100] import-route &#123;bgp | direct | static | isis [ process-id-isis ] | ospf [ process-id-ospf ]&#125;//在OSPF视图下，引入BGP/直连/静态/IS-IS/OSPF其他进程路由。 10.路由优先级华为定义的路由优先级： 123456789Direct：0OSPF：10IS-IS：15Static：60OSPF ASE：150OSPF NSSA：150IBGP：255EBGP：255//不同厂商定义的优先级可能不同 11.路由回灌 · R1将直连路由10.1.1.0/24引入到OSPF中。 · 10.1.1.0/24网段路由全OSPF域内通告。 · R2在IS-IS进程中引入OSPF路由。 · 10.1.1.0/24网段路由全IS-IS域内通告。 · R3在OSPF进程中引入IS-IS路由。 · 10.1.1.0/24网段路由再次被通告进OSPF域内，形成路由回灌。 12.路由度量值 · 不同的路由协议对路由度量值的定义不同，在引入时要考虑到度量值的定义。","categories":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/categories/HCIP-datacom/"}],"tags":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/tags/HCIP-datacom/"}]},{"title":"1、认识网络设备","slug":"HCIP_datacom/2.HCIP-datacom 认识网络设备","date":"2022-11-01T18:23:18.000Z","updated":"2022-11-05T19:28:17.408Z","comments":true,"path":"2022/11/02/HCIP_datacom/2.HCIP-datacom 认识网络设备/","link":"","permalink":"http://example.com/2022/11/02/HCIP_datacom/2.HCIP-datacom%20%E8%AE%A4%E8%AF%86%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/","excerpt":"","text":"Ⅰ- 网络设备框架1.框式设备硬件模块为了方便理解网络设备内部的各个功能模块以S12700E-8为例来讲解典型网络设备框架： 如下图所示：1 - 主控板（MPU，Main Processing Unit）：负责整个系统的控制平面和管理平面。 2 - 交换网板（SFU，Switch Fabric Unit）：负责整个系统的数据平面。数据面提供高速无阻塞数据通道，实现各个业务模块之间的业务交换功能。交换网板，接口板上都有自己的管理芯片，与主控板共同组成整个设备的管理控制平面。 3 - 接口板（LPU，Line Processing Unit）：线路处理单元是物理设备上用提供数据转发功能的模块，提供不同速率的光口、电口。 1.1.主控板提供了整个系统的控制平面和管理平面： 1 - 控制平面完成系统的协议处理、业务处理、路由计算、转发控制、业务调度、流量统计、系统安全等功能。 2 - 管理平面完成系统的运行状态监控、环境监控、日志和告警信息处理、系统加载、系统升级等功能。 1.2.交换网板交换网板提供整个系统的数据平面。 接口板、主控板之间通过交换网板完成通信。 1.3.接口板接口板提供了不同类型（光口、电口），不同速率的接入接口，通过分布式数据平面对数据进行转发 2.盒式设备硬件模块不同于框式设备，盒式设备的各个业务模块并不是独立的硬件模块，而是集成在一个框内。 3.模块连接逻辑图1 - 框式设备各个模块分为不同的单板，单板之间通过框式设备内部的连接进行通信。 2 - 盒式设备内部集成了这些模块，各个模块之间同样也是通过内部连接进行通信。 3 - 接口板和接口板之间通过交换网板连接了起来，接口板之间的通信统一经由交换网板进行转发。 4.网络设备逻辑构架网络设备从逻辑上可以分为以下三个平面： 数据平面、控制管理平面和监控平面。 5.控制平面1 - 设备的控制平面由主控板以及接口板的管理单元组成。 2 - 控制管理平面完成系统的控制管理功能，是整个系统的中枢神经系统。 3 - 控制平面完成系统的协议处理、业务处理、路由运算、转发控制、业务调度、流量统计、系统安全等功能。 4 - 交换机的控制平面用于控制和管理所有网络协议的运行。 5 - 控制平面提供了数据平面数据处理转发前所必须的各种网络信息和转发查询表项。 6.转发平面1 - 设备的转发平面由交换网板及接口组成 2 - LPU上存在PEE（转发引擎），其本质也是一个交换芯片，完成本接口板端口之间的交换。 3 - 数据平面完成数据报文的高速处理和内部无阻塞交换。包括报文的封装与解封装、IPv4/IPv6/MPLS转发处理、QoS与调度处理、内部高速交换以及各种统计。 7.监控平面1 - 监控平面由主控板、接口板的监控单元构成，部分框式设备还会存在单独的集中监控板（CMU）。 2 - 监控平面独立完成系统的环境监控，包括电压检测、系统上下电控制、温度监测与风扇控制等、以保证系统的安全稳定运行，在出现单元故障的情况下及时隔离故障，保障系统其他部分的正常运行。 Ⅱ - 网络设备对报文的处理流程1.报文转发上行、下行以交换网板为中心，可将报文在设备的行程一分为二，前半程为“上行”，下半程为“下行”。 1 - 设备处理报文分类：一种是业务报文，一种是协议报文。 2 - 对于业务报文设备只会进行转发，从一个接口进入之后依据转发表项从另外一个接口发送出去。 3 - 协议报文（如ARP、OSPF、BGP等协议的报文）设备在收到之后会交由控制层面进行处理，如ARP报文交由控制层面处理、判断之后决定是否回应，是否学习ARP报文中的源MAC、源IP。 2.业务报文转发处理流程业务报文从接口进入上行接口板处理之后，通过框式交换机内部总线交由交换网板，交换网板交由下行接口板处理之后从接口发出去。 1 - PFE（Packet Forwarding Engine）：包转发引擎。 2 - 业务报文：服务、应用在交互过程中涉及的报文。 3 - 切片：把报文送往交换网板之前，进行切片处理，也就是把报文按一定粒度进行切片，切成固定长度 4 - 重组：将交换网板发送过来的已经切片的报文进行重新组合 3.确定报文出口（1）1 - 当报文从接口板进入时，设备需要依据转发表项（IP路由表、MAC地址表等）确定报文的出接口（对于框式设备需要确定下行接口板）。 2 - 报文到达交换网板时已经明确了出接口、下行接口板，因此表项查询需要在上行接口板的处理过程中完成。 3 - 二层转发查询MAC地址表，三层转发查询三层路由表。 4.确定报文出口（2）1 - 转发表项存放在主控板上，报文进入接口板之后，接口板从主控板处查询表项。 2 - 每次转发都需要与主控板进行通信，转发效率低，报文时延增加，对高速率接口板而言转发速率严重下跌。 3 - 二层转发查询MAC地址表，三层转发查询三层路由表 5.确定报文出口（3）1 - 转发表项存放在接口板上，报文进入接口板之后直接在接口板完成报文查询，报文转发效率高。 2 - 所有接口板上都要存储转发表项，控制平面资源占用率高。 3 - 二层转发查询MAC地址表，三层转发查询三层路由表。 6.转发信息1 - 高端设备业务报文不经过主控板CPU处理，由接口板提供转发信息查询。 2 - 接口板上存在的转发信息并非存在于主控板上的转发表项（IP路由表、MAC地址表…）。主控板生成转发表项之后，生成对应的转发信息下发在接口板。 以IP路由表为例，路由表生成之后，主控板根据路由表生成FIP表项（Forwarding Information Base）并下发到接口板，接口板根据FIB表进行转发。 7.硬件转发1 - 接口板执行转发的不见为包转发引擎PFE（Packet Forwarding Engine），通常为NP或者ASIC芯片，报文直接由接口板独立完成转发，无需主控板参与。 2 - 高端框式设备把转发层面和控制层面分配在不同的组件，控制层面组件（主控板）负责运行转发相关协议、维护转发表项，转发平面组件（接口板）依据控制层面下发的转发信息能供独立完成转发工作，互不影响，控制层面组件高负载时并不会影响转发平面的正常工作，这种工作机制被成为转控分离。 业务报文转发由接口板、交换网板独立完成，无主控板参与。 8.协议报文转发处理流程设备收到的协议报文，如路由协议：OSPF、IS-IS、BGP报文，ARP报文，STP报文，对设备的ICMP请求报文等，需要交由设备的控制平面处理，即上送主控板由主控板的CPU进行处理。 1 - 主控板CPU收到协议报文之后进行相应的处理之后如果需要回应报文，则主控板会构造协议报文进行回应，如收到发往自身的ARP Request、ICMP Echo Request报文，主控板处理之后构造ARP Reply、ICMP Echo Reply进行回应。 2 - 主控板CPU处理能力有限，如果过多的协议报文上送主控板CPU处理，会造成其繁忙，无法及时对协议报文进行响应，为此设备默认限制了各种类型的协议报文上送主控板CPU的速率。 9.设备自身发送协议报文处理流程设备自身发送的协议报文，如路由协议报文：OSPF、IS-IS、BGP报文，ARP报文，STP报文，ICMP报文等，由主控板CPU构造之后交由接口板对外发送","categories":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/categories/HCIP-datacom/"}],"tags":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/tags/HCIP-datacom/"}]},{"title":"HCIP-datacom 学习路线规划","slug":"HCIP_datacom/1.HCIP-datacom学习路线规划","date":"2022-11-01T02:24:00.000Z","updated":"2022-11-05T19:28:12.685Z","comments":true,"path":"2022/11/01/HCIP_datacom/1.HCIP-datacom学习路线规划/","link":"","permalink":"http://example.com/2022/11/01/HCIP_datacom/1.HCIP-datacom%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92/","excerpt":"","text":"天数 学习内容 第 1 天 认识网络设备、IP路由基础、OSPF基础 第 2 天 OSPF区域内路由、区域间路由、外部路由、特殊区域 第 3 天 OSPF汇总特性、IS - IS原理介绍、邻接关系、DIS 第 4 天 IS - IS默认路由、引入过滤、排错、BGP基础 第 5 天 BGP路由、BGP路径属性、路由优选、RR联盟 第 6 天 BGP选路规则、MP-BGP、EVPN基础、路由控制与策略 第 7 天 流量过滤控制、STP选举、RSTP、P/A机制 第 8 天 MSTP、堆叠集群、IP组播基础、IGMP协议 第 9 天 IGMP实验、PIM-DM、PM-SM、IPv6基础 第 10 天 ICMP NDP、IPv6地址配置、DHCPv6、防火墙概述 第 11 天 BFD、VRRP、网络协议管理、数通解决方案 第 12 天 DHCP、交换综合排错、OSPF快速收敛、IS - IS高级特性 第 13 天 MPLS原理、MPLS LDP、MPLS VPN原理、HCIP考核 第 14 天 BGP高级、IPv6、VLAN、以太网、网络运维 第 15 天 知识点梳理 第 ··· 天 -背题库-","categories":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/categories/HCIP-datacom/"}],"tags":[{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/tags/HCIP-datacom/"}]},{"title":"Pure README","slug":"Hexo/Pure README","date":"2022-10-30T18:10:22.000Z","updated":"2022-11-02T20:01:14.814Z","comments":true,"path":"2022/10/31/Hexo/Pure README/","link":"","permalink":"http://example.com/2022/10/31/Hexo/Pure%20README/","excerpt":"","text":"特色 多语言 第三方评论框（友言、来必力、gitment、gitalk） 可展示个人豆瓣书单 可展示个人github托管项目 可设置支付宝、微信打赏 页面展示首页 | 归档 | 分类 | 标签 | 项目 | 书单 | 友链 | 关于 配置说明在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件 安装主题1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 更新主题12cd themes/puregit pull 启用pure主题打开站点配置文件，找到theme字段，将其值更改为 pure 1theme: pure 到此，主题安装完成。然后启动Hexo服务验证主题是否正确启用。 1hexo s 安装插件hexo-wordcount1npm install hexo-wordcount --save hexo-generator-json-content1npm install hexo-generator-json-content --save hexo-generator-feed1npm install hexo-generator-feed --save hexo-generator-sitemap1npm install hexo-generator-sitemap --save hexo-generator-baidu-sitemap1npm install hexo-generator-baidu-sitemap --save 主题配置设置语言打开站点配置文件, 将 language 设置成你所需要的语言。建议明确设置你所需要的语言,可选值对应themes\\pure\\languages目录下语言文件，简体中文配置如下： 1language: zh-CN 主题颜色定制了五套颜色，默认白，黑:theme-black，蓝:theme-blue，绿:theme-green，紫:theme-purple 123# configconfig: skin: # 主题颜色 theme-black theme-blue theme-green theme-purple 导航菜单12345678910111213141516171819202122# 导航菜单menu: Home: . Archives: archives # 归档 Categories: categories # 分类 Tags: tags # 标签 Repository: repository # github repositories Books: books # 书单 Links: links # 友链 About: about # 关于# 导航菜单图标（font awesome）menu_icons: enable: true # 是否启用菜单图标 home: icon-home-fill archives: icon-archives-fill categories: icon-folder tags: icon-tags repository: icon-project books: icon-book-fill links: icon-friendship about: icon-cup-fill 设置个人信息123头像在themes\\pure\\source\\images 目录下替换图片即可，捐献的二维码同理。个人信息大部分都在 主题配置文件 中设置 搜索主题内置三种站内搜索方式：insight、swiftype、baidu 12345# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search 分享支持weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedin 123456# Share# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare: enable: true # 是否启用分享 sites: weibo,qq,wechat,facebook,twitter # PC端显示的分享图标 mobile_sites: weibo,qq,qzone # 移动端显示的分享图标 评论主题集成了disqus、友言、来必力、gitment、gitalk评论系统，选择其中一种即可 12345678910111213141516# Comment# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/comment: type: livere # 启用哪种评论系统 disqus: # enter disqus shortname here youyan: uid: *** # enter youyan uid livere: uid: *** # enter livere uid gitment: githubID: username repo: username.github.io ClientID: *** ClientSecret: *** lazy: false 文章浏览量统计主题内置了不蒜子和leancloud来统计文章浏览量，启用其中之一即可，注意leancloud需要到其官网申请APP ID 和APP Key。 比如，启用不蒜子来统计文章浏览量，在主题配置文件中把busuanzi设置为true即可： 123pv: busuanzi: enable: true # 不蒜子统计 如果不需要第三方来统计浏览量，只需将相应设置改为false即可（设置为false后不会加载第三方JS脚本） 项目复制theme/pure/_source/ 目录下repository文件夹到blog path/source/ 目录下 新版配置（支持 Github 和 Gitee）： 新版配置将会覆盖旧版的 github 配置！ 12345# Repository Info (This will override &#x27;github&#x27; option)# 项目仓库展示信息（将会覆盖 github 项）repository: platform: github # 托管平台（github | gitee） username: *** # 用户名 旧版配置（仅支持 Github）： 123# Githubgithub: username: *** # github username 豆瓣书单复制theme/pure/_source/ 目录下books文件夹到blog path/source/ 目录下 12345# douban 豆瓣书单douban: user: *** # 豆瓣用户名 start: 0 # 从哪一条记录开始 count: 100 # 获取豆瓣书单数据条数 友情链接复制theme/pure/_source/ 目录下links文件夹到blog path/source/ 目录下 在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。 然后在文件内创建一个名为 links.yml 的文件,在其中添加相关数据即可。 单个友情链接的格式为： 1234Name: link: http://example.com avatar: http://example.com/avatar.png desc: &quot;这是一个描述&quot; 添加多个友情链接，我们只需要根据上面的格式重复填写即可。 . 将 Name 改为友情链接的名字，例如 Cofess。 . http://example.com 为友情链接的地址。 . http://example.com/avatar.png 为友情链接的头像。 . 这是一个描述 为友情链接描述。 文章索引目录123456title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引 sidebar侧边栏文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可： 123456title: 文章标题categories: - 文章分类tags: - 文章标签sidebar: none # 是否启用sidebar侧边栏，none：不启用 博客优化hexo-neat auto Minify html、js、css and make it neat 1npm install hexo-neat --save 在博客配置文件_config.yml中添加 12345678910111213141516# hexo-neatneat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - &#x27;*.min.css&#x27;neat_js: enable: true mangle: true output: compress: exclude: - &#x27;*.min.js&#x27; hexo-baidu-url-submit1npm install hexo-baidu-url-submit --save hexo-translate-title 使用Google翻译，百度翻译和有道翻译将Hexo中的汉字标题转成英文标题 安装 1npm install hexo-translate-title --save 在博客配置文件_config.yml中添加 123456translate_title: translate_way: google #google | baidu | youdao youdao_api_key: XXX youdao_keyfrom: XXX is_need_proxy: true #true | false proxy_url: http://localhost:8123 注意：判断是否需要配置google本地代理，因为我在本地是开启时才能访问google翻译的，如果没有被墙，请将_config.yml 下的is_need_proxy: true改为false。如果设置为true,请设置本地代理地址 数学公式 Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签 解决方案解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的方法。 更换Hexo的markdown渲染引擎，hexo-renderer-markdown-it-plus引擎替换默认的渲染引擎hexo-renderer-marked即可。 安装hexo-renderer-markdown-it-plus插件12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save 配置安装插件后，如果未正常渲染LaTeX数学公式，在博客配置文件_config.yml中添加 12345678910111213141516markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-katex enable: true - plugin: name: markdown-it-mark enable: false 文章启用mathjax12title: Hello Worldmathjax: true","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"在PowerShell中使用title命令","slug":"PowerShell/在PowerShell中使用title命令","date":"2022-10-30T18:10:22.000Z","updated":"2022-12-21T00:39:21.291Z","comments":true,"path":"2022/10/31/PowerShell/在PowerShell中使用title命令/","link":"","permalink":"http://example.com/2022/10/31/PowerShell/%E5%9C%A8PowerShell%E4%B8%AD%E4%BD%BF%E7%94%A8title%E5%91%BD%E4%BB%A4/","excerpt":"","text":"在Powershell中无法像在cmd内一样愉快的使用title命令来更改标题而是使用如下命令1$host.ui.RawUI.WindowTitle=&quot;自定义标题&quot; 使用这条命令来更改属实是有点麻烦，很难记，所以我们使用alias来让title命令可以在Powershell内使用1test-path $profile 如果返回值为false则执行如下命令1New-Item -path $profile -type file -force 如果返回值为true则执行如下命令注：在执行此命令前需要电脑内安装了Visual Studio Code 1code $profile 运行完之后会打开一个profile文件，在该文件内输入以下代码1234function Set-WindowTitle &#123; $host.UI.RawUI.WindowTitle = [string]::Join(&quot; &quot;, $args)&#125;Set-Alias -name &quot;title&quot; -value Set-WindowTitle 重启Powershell可以发现我们在PowerShell内可以使用title命令改更改窗口标题了1title A Minecraft Server","categories":[{"name":"网络工程（杂项）","slug":"网络工程（杂项）","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/"}],"tags":[{"name":"PowerShell","slug":"PowerShell","permalink":"http://example.com/tags/PowerShell/"}]},{"title":"Hexo Pure主题修改日记","slug":"Hexo/Hexo Pure主题修改日记","date":"2022-10-30T18:10:22.000Z","updated":"2022-11-06T20:12:17.107Z","comments":true,"path":"2022/10/31/Hexo/Hexo Pure主题修改日记/","link":"","permalink":"http://example.com/2022/10/31/Hexo/Hexo%20Pure%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E6%97%A5%E8%AE%B0/","excerpt":"","text":"1.添加背景动画背景动画基于canvas，在\\themes\\pure\\layout\\layout.ejs中添加 12345678&lt;!-- 背景动画 --&gt; &lt;script type=&quot;text/javascript&quot; color=&quot;0,0,0&quot; opacity=&#x27;0.8&#x27; zIndex=&quot;-2&quot; count=&quot;88&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; &lt;!-- color: 线条颜色，默认：‘0，0，0’；三个数字分别为(R,G,B),注意使用，分割 opacity: 线条透明度0~1,默认0.5 count: 线条总数量，默认150 zIndex: 背景的z-Index属性，css用于控制所在层的位置，默认-1 --&gt; 2.更改代码块样式修改.\\themes\\pure\\source\\css\\style.css 123456789101112pre,.highlight &#123; background: #cfcbcb; margin: 10px 0; padding: 15px 10px; overflow: auto; font-size: 18px; font-family: &quot;Consolas&quot;; font-weight: bold; color: #4d4d4c; line-height: 1.5;&#125; 3.添加代码块一键复制按钮[原文]（1）、增加全局函数addLoadEvent 在/themes/pure/source/js目录下打开application.js，在文件最后追加 1234567891011function addLoadEvent(func) &#123; var oldonload = window.onload; if (typeof window.onload != &#x27;function&#x27;) &#123; window.onload = func; &#125; else &#123; window.onload = function() &#123; oldonload(); func(); &#125; &#125;&#125; （2）、新增按钮 pure默认情况下是没有代码复制功能的，此时需要对hexo增加复制代码块功能。首先在/themes/pure/layout/_partial目录下新增article-copy-code.ejs，增加以下内容： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;% if(theme.codeblock.copy_button.enable)&#123; %&gt; &lt;style&gt; .copy-btn &#123; display: inline-block; padding: 6px 12px; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; white-space: nowrap; vertical-align: middle; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc, #eee); border: 1px solid #d5d5d5; border-radius: 3px; user-select: none; outline: 0; &#125; .highlight-wrap .copy-btn &#123; transition: opacity .3s ease-in-out; opacity: 0; padding: 2px 6px; position: absolute; right: 4px; top: 8px; z-index: 2; &#125; .highlight-wrap:hover .copy-btn, .highlight-wrap .copy-btn:focus &#123; opacity: 1 &#125; .highlight-wrap &#123; position: relative; &#125; &lt;/style&gt; &lt;script&gt; addLoadEvent(()=&gt;&#123; $(&#x27;.highlight&#x27;).each(function (i, e) &#123; var $wrap = $(&#x27;&lt;div&gt;&#x27;).addClass(&#x27;highlight-wrap&#x27;) $(e).after($wrap) $wrap.append($(&#x27;&lt;button&gt;&#x27;).addClass(&#x27;copy-btn&#x27;).append(&#x27;&lt;%= __(&quot;codeblock.copy_button&quot;) %&gt;&#x27;).on(&#x27;click&#x27;, function (e) &#123; var code = $(this).parent().find(&quot;.code&quot;)[0].innerText &lt;% if(theme.codeblock.copyright.enable)&#123; %&gt; code += &quot;&lt;%= theme.codeblock.copyright.content %&gt;&quot; &lt;% &#125; %&gt; var ta = document.createElement(&#x27;textarea&#x27;) document.body.appendChild(ta) ta.style.position = &#x27;absolute&#x27; ta.style.top = &#x27;0px&#x27; ta.style.left = &#x27;0px&#x27; ta.value = code ta.select() ta.focus() var result = document.execCommand(&#x27;copy&#x27;) document.body.removeChild(ta) &lt;% if(theme.codeblock.copy_button.result)&#123; %&gt; if(result)$(this).text(&#x27;&lt;%= __(&quot;codeblock.copy_success&quot;) %&gt;&#x27;) else $(this).text(&#x27;&lt;%= __(&quot;codeblock.copy_failure&quot;) %&gt;&#x27;) &lt;% &#125; %&gt; $(this).blur() &#125;)).on(&#x27;mouseleave&#x27;, function (e) &#123; var $b = $(this).find(&#x27;.copy-btn&#x27;) setTimeout(function () &#123; $b.text(&#x27;&lt;%= __(&quot;codeblock.copy_button&quot;) %&gt;&#x27;) &#125;, 300) &#125;).append(e) &#125;) &#125;) &lt;/script&gt; &lt;% &#125; %&gt; （3）、插入到页面：编辑/themes/pure/layout/layout.ejs，在&lt;/body&gt;前面一行增加&lt;%- partial(&#39;_partial/article-copy-code&#39;)%&gt; 123456 &lt;%- body %&gt; &lt;%- partial(&#x27;_common/footer&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;%- partial(&#x27;_common/script&#x27;, &#123;post: page&#125;) %&gt; &lt;%- partial(&#x27;_partial/article-copy-code&#x27;) %&gt;&lt;/body&gt;&lt;/html&gt; （4）、增加语言文件：在/themes/pure/languages目录下选择对应的语言文件，在文件后面增加： 1234codeblock: copy_button: 复制 copy_success: 复制成功 copy_failure: 复制失败 （5）、增加主题配置文件打开themes/pure/_config.yml，在文件末尾添加 1234567codeblock: copy_button: enable: true result: true copyright: enable: true content: false 4.代码块滚动条[原文]12345678910111213141516171819202122232425262728293031323334.highlight::-webkit-scrollbar &#123; /*滚动条整体样式*/ /*高宽分别对应横竖滚动条的尺寸*/ /*width: 10px;*/ height: 8px;&#125; /* 代码块滚动条 */.highlight::-webkit-scrollbar-thumb &#123; /*滚动条里面小方块*/ border-radius: 45px; /*background-color: #D62929;*/ background-color: #6f6969; background-image: -webkit-linear-gradient(168deg, rgba(255, 255, 255, 0.2) 100%, /*12.5*/ transparent 12.5%, transparent 25%, rgba(255, 255, 255, 0.2) 25%, rgba(255, 255, 255, 0.2) 37.5%, transparent 37.5%, transparent 50%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0.2) 62.5%, transparent 62.5%, transparent 75%, rgba(255, 255, 255, 0.2) 75%, rgba(255, 255, 255, 0.2) 87.5%, transparent 87.5%);&#125;.highlight::-webkit-scrollbar-track &#123; /*滚动条里面轨道*/ background-color: #0f111a;&#125; 5.添加回到顶部 [ 原文 ]文件位置：./themes/pure/layout/_common/script.ejs，在合适位置添加如下代码： 123456789101112131415161718192021222324252627282930313233&lt;div id=&quot;go-top&quot;&gt;&lt;/div&gt;&lt;style type=&quot;text/css&quot;&gt;#go-top &#123; width:40px;height:36px; background-color:#DDA0DD; position:relative; border-radius:2px; position:fixed;right:10px;bottom:60px; cursor:pointer;display:none;&#125;#go-top:after &#123; content:&quot; &quot;; position:absolute;left:14px;top:14px; border-top:2px solid #fff;border-right:2px solid #fff; width:12px;height:12px; transform:rotate(-45deg);&#125;#go-top:hover &#123; background-color:#8A2BE2;&#125;&lt;/style&gt;&lt;script&gt;$(function () &#123; var top=$(&quot;#go-top&quot;); $(window).scroll(function () &#123; ($(window).scrollTop() &gt; 300) ? top.show(300) : top.hide(200); $(&quot;#go-top&quot;).click(function () &#123; $(&#x27;body,html&#x27;).animate(&#123;scrollTop:0&#125;); return false(); &#125;) &#125;);&#125;);&lt;/script&gt; 6.使文章图片居中[ 原文 ]第一步：在./themes/pure/source/css/style.css下 第二步：125行img修改： 12345678img &#123; border: 0; box-sizing: border-box; margin: auto; padding: 3px; text-align: center; display: block;&#125;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}],"categories":[{"name":"Git","slug":"Git","permalink":"http://example.com/categories/Git/"},{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/categories/HCIP-datacom/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/categories/Hexo/"},{"name":"网络工程（杂项）","slug":"网络工程（杂项）","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"},{"name":"HCIP-datacom","slug":"HCIP-datacom","permalink":"http://example.com/tags/HCIP-datacom/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://example.com/tags/PowerShell/"}]}